import { File } from '@asyncapi/generator-react-sdk';
import {getTagByName } from '../utils/general';

export default function readmeFile({ asyncapi, originalAsyncAPI }) {
  var specObj = JSON.parse(originalAsyncAPI);
  var tags = specObj.tags;
  var feedName;
  let tag = getTagByName(tags, "template"); //check for the iac tag
  if (tag !== undefined){ //nothing to deploy, no need for a script
    feedName = tag.externalDocs.url + '\/' + tag.externalDocs.description;
  }
  let subChannel;
  for (let channel of Object.values(asyncapi.channels())){
      if (channel.hasPublish){
          subChannel = channel
      }
  }
  //get the function type and if needed the verb blocks for the http type.
  let xfunction = subChannel.ext("x-function");
  let type = xfunction.type;
  return <File name={'README.md'}>
    {
      `
<h1 align="center">This is generated .NET C# code - ${asyncapi.info().title()}.</h1>

<p align="center">
  <em>.NET C# Function App w/ a trigger of type: ${type}.</em>
</p>

**NOTE: This code can be regenerated by supplying the ITFactory Generator with the ITFactory specification file named: ${asyncapi.info().title() } and version: ${asyncapi.info().version()}. 

Any customizations to the previously generated code will be lost if not under source control.** 

The template used can be found in this artifact feed named: ${feedName}

Description: ${asyncapi.info().json('description') || ''}
    `
    }
  </File>;
}
